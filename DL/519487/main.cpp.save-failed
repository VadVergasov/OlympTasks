#include <bits/stdc++.h>

using namespace std;

void split(const string& str, vector<string>& cont, char delim = ' '){
    stringstream ss(str);
    string token;
    while (getline(ss, token, delim)) {
        cont.push_back(token);
    }
}

int main(){
    ofstream out("output.txt");
    ifstream in("input.txt");
    string a, b;
    getline(in, a);
    getline(in, b);
    if(a.size()==2&&b.size()==2){
        out<<"[]";
        return 0;
    }
    a.erase(0, 1);
    a.erase(a.size()-1, 1);
    b.erase(0, 1);
    b.erase(b.size()-1, 1);
    regex regex{R"(, )"};
    sregex_token_iterator it{a.begin(), a.end(), regex, -1};
    vector<string> ra{it, {}};
    it={b.begin(), b.end(), regex, -1};
    vector<string> rb{it, {}};
    set<int> num;
    for(int i=0;i<ra.size();i++){
        if(!(ra[i][0]>='0'&&ra[i][0]<='9')){
            break;
        }
        if(ra[i].find("..")==-1){
            num.insert(stoi(ra[i]));
        }else{
            int pos=ra[i].find("..");
            int f=stoi(ra[i].substr(0, pos)), s=stoi(ra[i].substr(pos+2, ra[i].size()-pos-2));
            for(int j=f;j<=s;j++){
                num.insert(j);
            }
        }
    }
    for(int i=0;i<rb.size();i++){
        if(!(rb[i][0]>='0'&&rb[i][0]<='9')){
            break;
        }
        if(rb[i].find("..")==-1){
            num.insert(stoi(rb[i]));
        }else{
            int pos=rb[i].find("..");
            int f=stoi(rb[i].substr(0, pos)), s=stoi(rb[i].substr(pos+2, rb[i].size()-pos-2));
            for(int j=f;j<=s;j++){
                num.insert(j);
            }
        }
    }
    string res="[";
    vector<int> tmp;
    for(set<int>::iterator i=num.begin();i!=num.end();i++){
        if(*i+1==*next(i, 1)){
            tmp.push_back(*i);
        }else{
            if(tmp.size()==0){
                res+=to_string(*i);
                res+=", ";
            }else{
                tmp.push_back(*i);
                res+=to_string(tmp[0]);
                res+="..";
                res+=to_string(tmp[tmp.size()-1]);
                res+=", ";
                tmp.clear();
            }
        }
    }
    res.erase(res.size()-2, 2);
    res+="]";
    out<<res;
    return 0;
}
